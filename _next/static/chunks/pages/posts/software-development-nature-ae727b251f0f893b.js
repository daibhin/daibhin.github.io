(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[444],{335:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/software-development-nature",function(){return t(9967)}])},9967:function(e,n,t){"use strict";t.r(n);var s=t(5893),i=t(9008);n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=function(){var n=Object.assign({p:"p",strong:"strong",h4:"h4",ul:"ul",li:"li"},e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.default,{children:(0,s.jsx)("title",{children:"Revision Notes: The Nature of Software Development"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"The philosophy:"})}),"\n",(0,s.jsxs)(n.p,{children:["We want ",(0,s.jsx)(n.strong,{children:"value"}),".\nTeams must be given responsibility for creating value.\nThey must be ",(0,s.jsx)(n.strong,{children:"guided"})," to understand needs and time constraints.\nThese teams must be ",(0,s.jsx)(n.strong,{children:"organised"}),".\nWe organise around features.\nWe ",(0,s.jsx)(n.strong,{children:"plan"})," by selecting the features we need, and in what order.\nWe ",(0,s.jsx)(n.strong,{children:"build"})," feature by feature to ensure frequent delivery of value.\nThis ensures that we can see how things are progressing, early and often.\n",(0,s.jsx)(n.strong,{children:"Slicing"})," features down enhances this.\nA capable product can be enhanced and grown.\nYou must always remain ready to ship.\nWe must ensure ",(0,s.jsx)(n.strong,{children:"quality"})," as we go to ensure value remains continuous, sustainable and indefinite."]}),"\n",(0,s.jsx)(n.h4,{children:"Value"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Value is what we want. * Features (minimum marketable features) deliver value."}),"\n",(0,s.jsx)(n.li,{children:"Work incrementally for each new feature. _ Value is only achieved once software\nis shipped. Value must be delivered early. _ Features: Everyone may want something\ndifferent, but no one wants everything. _ Ship early, ship often. _ Focus on high\nvalue, low cost features first. The next features mightn't be worth the time and\nmoney once the time comes to make them (so don't!)."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{children:"Guiding"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Don't follow the Analysis, Design, Coding, Testing in series method. Analysis doesn't\ngive insight to Design or Coding. Testing at the end leaves no time to readjust."}),"\n",(0,s.jsx)(n.li,{children:"Monolith projects are bad. _ You'll waste time planning for things you'll never\ncomplete by the deadline = Wasted work! _ Multiple releases are easier manage and\nshow value sooner. * Projects that deliver feature by feature are more predictable."}),"\n",(0,s.jsx)(n.li,{children:"You get a better sense of the projects cadence."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{children:"Organizing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If teams are organized by skills-set, scheduling and delays will arise during handoffs\nbetween teams. _ Organize by 'Feature Teams', each with all the necessary skills\nto build the ",(0,s.jsx)(n.strong,{children:"entire"})," feature. _ If you don't have enough specialists for all your\nteams, just make do. Assigning the best to the most important features. Creates a\ntraining/learning opportunity on the other teams. A Community of Practice! _ Build\nCommunities of Practice around around skills. However, people still belong to their\nfeature teams. _ Community experts now must bring everyone else up to speed in the\ncommunity. * Experts are not paid because they are so, but because they help others\nbecome an expert too."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{children:"Planning"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Move from grand visions to tiny bites. _ Don't make plans too detailed - it will\nwaste time and cause confusion. _ Key features are important to identify. _ Defer\nlow value ideas indefinitely. _ Think about the product deeply, not just at the beginning,\nbut all the time. _ Stay loose and ready to change plans during the project. _ Make\ntime and money budgets, producing the most valuable features first. Stop when the\nclock runs out. _ Break two week sprints into two/three day stories. _ Larger stories\n(often broken into technical tasks) are hard for business-side people to evaluate\nuntil the end of the two-week sprint. _ Teams should choose how much work they can\nget done. They know better and will feel more commitment/determination to see the\nwork through. _ Have planning sessions where features are presented one at a time."}),"\n",(0,s.jsx)(n.li,{children:"Don't estimate individual pieces of work, look at the aggregate and decide how\nmuch the team can do. _ 'Yesterday's Weather' - You'll get as much done today as\nyou did yesterday. _ Estimates are risky - they want to be improved, compared. What\nis achieved by estimating? _ Get started immediately, if a prediction of how long\nthings will take is needed, just count the things done. _ Stretch goals are destructive.\nTeams will try and unconsciously hurry - forgotten tests, unclean code. _ Hurrying\nintroduces defects. _ Defects take longer to fix than they do to prevent. _ Estimates\nfocus on the cost of things rather than the value. _ If there is too much food don't\neat it, therein lies obesity and lethargy. * In it for the whole project, staying\nhealthy is critical."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{children:"Building"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Go through a complete product development cycle from concept to ready to ship (requirements,\ndesign, coding and testing) in the one- or two-week cycles. _ Large, vague, sweeping\nrequirements must be broken into small, practical next steps. _ Strive for maximum\nvalue with minimum effort. _ Features are either done or not done. There is no middle\nground. _ Eliminate the test-and-fix finish. They drag on forever. _ Software should\nbe free of defects ",(0,s.jsx)(n.strong,{children:"all"})," the time. _ Design as you go. _ Too much and all features\nwon't be completed. _ Too little and features will be hard to execute. * Manage through\nobservation. Tweak, observe, tweak again."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{children:"Slicing in Parallel"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Every feature needs a solid infrastructure, a "foundation". _ If foundation is\nbuilt first, too much of it will be built. Resulting in fewer features. _ Building\nfoundations first inhibits features being shipped. This restricts value creation.'}),"\n",(0,s.jsxs)(n.li,{children:["Build features to be complete enough (a simple functional version). Do not start\nby building each feature to its full glory. _ We still need to build ",(0,s.jsx)(n.strong,{children:"all"})," the\nfeatures that are important, not just a few. _ Fill these features to as much capability\nas time permits. _ Small versions of each necessary feature, with just enough foundation\nto be solid is best. _ Having the best product at every moment, means we have the\nbest possible project when we decide to ship. * Don't design an entire system upfront,\nas we never know upfront what the system will be."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{children:"Bug Free"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Product is built up of a set of correctly working features. _ Defects amount to\nnegative features. _ Progress becomes uncertain. _ Eliminating defects as you go\nprovides clarity on whats done. _ Defect repair is an unknown time delay. _ Repair\nas you go. _ Bugs are introduced when design evolves and when features are added\nor enhanced. _ Continuous comprehensive testing is required to catch new bugs. _\nBusiness-level Tests: Verify we have received what we asked for. _ WE must test everything.\nThis means more and better tests over time. _ Test burden grows over time. We need\nto keep up with it. _ Acceptance Test-Driven Development: Expressing features in\nterms of tests they must pass. _ Programmer Tests: Use TDD to ensure the code works\nas expected. _ More tests makes the team go faster. _ It takes longer to find and\nfix a problem that to prevent one in the first place. _ Design improvements must\nkeep up, like testing practices. _ Every change tends to break our current design."}),"\n",(0,s.jsx)(n.li,{children:"Design must be refactored. _ Deteriorating design costs us in the same way a lack\nof tests do. _ We get slower unless the design remains fresh. * Testing and refactoring\nare required to make feature-by-feature development possible."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{children:"Recap"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Value is what we want. _ Features deliver value. _ Manage by looking at value,\nnot by dates/artifacts that don't deliver value. _ Planning by feature is easy. _\nDon't estimate if possible. Using 'Yesterday's Weather' works best _ Build features\nas small complete products every week. _ Products must always work correctly and\nbe well designed."}),"\n"]})]})},t=e.components||{},r=t.wrapper;return r?(0,s.jsx)(r,Object.assign({},e,{children:(0,s.jsx)(n,{})})):n()}},9008:function(e,n,t){e.exports=t(3121)}},function(e){e.O(0,[774,888,179],(function(){return n=335,e(e.s=n);var n}));var n=e.O();_N_E=n}]);